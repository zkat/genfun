* archive [28/28]
** DONE Write a package.json file                             :build:release:
   CLOSED: [2013-08-17 Sat 11:05]
** DONE Add build system                                              :build:
   CLOSED: [2013-08-17 Sat 11:13]
** DONE Convert genfun.js to browserify                                :misc:
   CLOSED: [2013-08-17 Sat 11:34]
   Make sure there's some way to get the global Genfun object?
** DONE CommonJS support                                            :feature:
   CLOSED: [2013-08-17 Sat 11:34]
   Make sure the system can be loaded/built on commonjs
** DONE Port tests to mocha                                            :test:
   CLOSED: [2013-08-17 Sat 12:53]
** DONE Multiple loader support                                     :feature:
   CLOSED: [2013-08-17 Sat 13:10]
   Make genfun.js work whether you're using a raw import, amd, or commonjs
   UPDATE: awesome, browserify already does this for you. :)
** DONE Make __roles__ even more obscure                            :feature:
   CLOSED: [2013-08-17 Sat 13:18]
   It could still conflict with other internals, unfortunately.
** DONE Split genfun.js into multiple files                        :yakshave:
   CLOSED: [2013-08-17 Sat 13:29]
** DONE Implement Genfun.no_applicable_method                       :feature:
   CLOSED: [2013-08-17 Sat 14:27]
   See http://www.lispworks.com/documentation/HyperSpec/Body/f_no_app.htm
** DONE genfun.js-style external API                                    :api:
   CLOSED: [2013-08-17 Sat 15:15]
   Change the API so things work more like how genfun.js likes things to be
   defined (with genfuns being treated more like functions inside modules)
** DONE camelCase for external interface                               :misc:
   CLOSED: [2013-08-17 Sat 15:18]
   Everything that's external should use camelCase like regular javascript.
** DONE Write docs                                                     :docs:
   CLOSED: [2013-08-17 Sat 17:14]
   Sphinx looks nice. Maybe I'll try that this time around.
   UPDATE: used jsdoc
** DONE Fix stack overflow when [[[[Proto]]]] is null                       :bug:
   CLOSED: [2013-08-17 Sat 21:30]
   See test failure. It probably has to do with how noApplicableMethod will
   try to dispatch on all arguments, treating things like Object.prototype.
** DONE Make tests runnable in testling                                :test:
   CLOSED: [2013-08-17 Sat 22:59]
   https://ci.testling.com/
** DONE Release on npm                                              :release:
   CLOSED: [2013-08-18 Sun 00:28]
** DONE Reconsider how dispatch works when dispatch list is []      :feature:
   CLOSED: [2013-08-18 Sun 00:59]
   The intent was for it to work like [Object.prototype], but this doesn't
   really make sense when you're dealing with objects with null
   [[[[Proto]]]]. Perhaps just get rid of the "feature" altogether? Another
   possibility is to get rid of noApplicableMethod (or hide it/discourage
   it) and have [] mean "default".
   Update: I like the latter idea, but implementation seems to break other
   things. write some more tests before diving into this one. Need full
   dispatch coverage, specially for things involving null [[[[Proto]]]]
** DONE Pull in JSHint                                                 :test:
   CLOSED: [2013-08-18 Sun 12:37]
** DONE Obey the JSHint                                               :test:
   CLOSED: [2013-08-18 Sun 12:37]
** DONE Fix null object error when calling a fresh genfun               :bug:
   CLOSED: [2013-08-18 Sun 14:08]
** DONE Write an fmap example file                                     :meta:
   CLOSED: [2013-08-21 Wed 23:38]
** DONE Write an example that shows off namespaced methods             :meta:
   CLOSED: [2013-08-22 Thu 01:37]
** DONE Better No Applicable Method error                           :feature:
   CLOSED: [2013-08-22 Thu 01:37]
   When you get a dispatch error, it just bloody crashes with a
   message. It should at least be its own exception with a more
   informative message (probably including the things that you tried to
   dispatch against) for clarity.
** DONE Release on bower                                            :release:
   CLOSED: [2013-08-22 Thu 02:01]
   Bower is for releasing frontend code, and this thing can be used in the
   frontend so...
** DONE make release target                                         :release:
   CLOSED: [2013-08-23 Fri 19:35]
   Add make release to the Makefile. Should do a test, git tag, and push
   out to npm.
** DONE Move basic example to examples/ and replace with simpler one   :meta:
   CLOSED: [2013-08-24 Sat 10:04]
   Write a shorter one for the README
** DONE Write an example that shows off OO design stuff                :meta:
   CLOSED: [2013-08-24 Sat 10:04]
   Probably the best thing to do here is to pick a module that's already
   written in OO style and rewrite it to show the different. Maybe
   something like todomvc has a tiny example I can base it on?
** DONE Consistent term for a method's 'participants'            :yakshaving:
   CLOSED: [2013-08-26 Mon 23:25]
   What about "selector"? It's pretty widespread in the JS community. :)
** DONE Method combination                                          :feature:
   CLOSED: [2013-08-27 Tue 00:44]
   Or at least the ability to Genfun.next_method()
   This is actually pretty important to have. :\

   Update: The current approach is reasonable, although the dynamic nature
   of callNextMethod and company is a bit worrisome. Better to have
   something at all, though. Might be good to structure it later so method
   functions accept arguments and stuff, instead of setting all these
   variables.
   The one big downside right now is that this approach won't mesh very
   well with the way we're doing "default" methods -- meaning, right now,
   the method-definition algorithm treats methods with [] selectors as
   noApplicableMethod definitions. It might be a bit surprising to define
   a [] method and not have it be accesible with callNextMethod.
   That said, it's also not acceptable to have objects with null
   prototypes get access to this noApplicableMethod functionality
   magically.

   tl;dr: either git rid of the [] shorthand for noApplicableMethod or let
   people just wonder why [] "methods" aren't being called by
   callNextMethod. Just specify it that way and be done with it.
* backlog [0/13]
** TODO Use partial dispatch trick                             :optimization:
** TODO Cache effective method function                        :optimization:
   Can probably be done as part of the PIC?
** TODO IE7/IE8 support                                              :compat:
   Array methods, possibly defineProperty usage. Other things, too?
** TODO Write benchmark test                                           :test:
   Write benchmark tests that fail when certain things get too slow. Or,
   start by searching around for what sort of things people do when they
   want to test performance from a library.
** TODO Can I trick browsers into giving me Map information?   :optimization:
** TODO Change function/var naming to camelCase                        :misc:
   Ugh. Maybe some day.
** TODO Put together a bug for the Object.prototype thing              :misc:
** TODO Inherit from Function if allowed                            :feature:
** TODO Special-case genfun functions in dispatch                   :feature:
   If we try to dispatch a genfun's wrapper function, redirect dispatch so
   that it pretends it's actually working on the genfun.
** TODO Method redefinition                                         :feature:
   Overwrite methods with identical specs.
** TODO Method removal                                              :feature:
   Write a removeMethod() method.
** TODO Score according to arglist position                         :feature:
   Right now, all arguments across the arglist are scored evenly. Consider
   making items earlier in the arglist have greater weight in the scoring
   algorithm.
** TODO Rewrite the callNextMethod stuff                            :cleanup:
   Don't just set something globally, or something. I don't know. Do it different.
* active [1/15]
** DONE Write more tests for the nextMethod stuff                      :test:
   CLOSED: [2013-08-28 Wed 18:59]
** TODO Allow rebinding of `this` in callNextMethod                 :feature:
** TODO Try having the selector as the third argument to addMethod      :api:
   Functions get annoyingly indented otherwise.
** TODO Figure out selling points                                      :meta:
   Figure out what would get people interested in genfun.js
*** Namespacing for methods
    Extend standard prototypes without worrying about littering them or
    conflicting with external libraries! Methods belong to genfuns, not to
    the objects they dispatch on.
*** Multiple dispatch for JS
*** Dispatch without `this`
    Free yourself from `this`, but use it if you really want. You don't
    need it for dynamic dispatch, though!
*** Think with protocols
    Stop worrying about what things "are", or what methods they "have" --
    write your code expecting regular functions' arguments to simply work
    when you call a certain function on them. If you need different
    behavior for different functions, define a genfun then and only then,
    and leave all callsites untouched.
*** Seamless integration with functional code
    Like writing things functionally? Wish you had something like
    typeclasses? genfun can do that.
** TODO Write up a better README that quickly sells genfun.js up       :meta:
** TODO Fill in pending tests                                          :test:
** TODO More fine-grained dispatch tests                               :test:
   Right now, dispatch testing is covered by a single big blob of
   tests. Make more granular tests that test things like integration with
   primitives, variable arity methods, empty places in the dispatch array,
   empty dispatch arrays, prototype inheritance, etc.
** TODO split test/genfun.js into multiple files                       :test:
   It's starting to be a bit of an overwhelming blob of text.
** TODO Consider using something other than assert for tests           :test:
** TODO Allow ability to add name in Genfun constructor             :feature:
   Named functions are easier to debug. A name option to the constructor
   would make this a bit nicer.
** TODO Improve docs with a tutorial or explanation                    :docs:
   Right now, there's a quickstart and some light API docs. Figure out how
   to best explain what genfun.js does and how to use it.
** TODO multiple method definition syntax for new Genfun()          :feature:
   So you can do something like:

   var frob = new Genfun({
     methods: [{
       arguments: [Number.prototype],
       fun: function(num) {
         return "got a number!";
       }
     }]
   });
** TODO Implement a PIC                                        :optimization:
   https://en.wikipedia.org/wiki/Inline_caching#Polymorphic_inline_caching
   How the hell can you do that with JS without a preprocessor?
** TODO Warn when overriding an existing method                     :feature:
** TODO Write a protocol utility using genfun.js                    :feature:
   Perhaps something that can be automatically tested.
